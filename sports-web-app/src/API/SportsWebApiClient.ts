//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "https://localhost:44369";
    }

    /**
     * @return Success
     */
    sportsWebAPIEndPointsTodoEndPoint(id: number, scream: boolean): Promise<SportsWebAPIResponsesTodoResponse> {
        let url_ = this.baseUrl + "/todo?";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (scream === undefined || scream === null)
            throw new globalThis.Error("The parameter 'scream' must be defined and cannot be null.");
        else
            url_ += "scream=" + encodeURIComponent("" + scream) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSportsWebAPIEndPointsTodoEndPoint(_response);
        });
    }

    protected processSportsWebAPIEndPointsTodoEndPoint(response: Response): Promise<SportsWebAPIResponsesTodoResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SportsWebAPIResponsesTodoResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SportsWebAPIResponsesTodoResponse>(null as any);
    }
}

export class SportsWebAPIResponsesTodoResponse implements ISportsWebAPIResponsesTodoResponse {
    todo?: string;
    isDone?: boolean;

    constructor(data?: ISportsWebAPIResponsesTodoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.todo = _data["todo"];
            this.isDone = _data["isDone"];
        }
    }

    static fromJS(data: any): SportsWebAPIResponsesTodoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SportsWebAPIResponsesTodoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["todo"] = this.todo;
        data["isDone"] = this.isDone;
        return data;
    }
}

export interface ISportsWebAPIResponsesTodoResponse {
    todo?: string;
    isDone?: boolean;
}

export class SportsWebAPIRequestsTodoRequest implements ISportsWebAPIRequestsTodoRequest {

    constructor(data?: ISportsWebAPIRequestsTodoRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SportsWebAPIRequestsTodoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SportsWebAPIRequestsTodoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISportsWebAPIRequestsTodoRequest {
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}